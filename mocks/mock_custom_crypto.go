// Code generated by MockGen. DO NOT EDIT.
// Source: customcrypto/custom_cypto.go

// Package mock_customcrypto is a generated GoMock package.
package mock_customcrypto

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCustomCrypto is a mock of CustomCrypto interface
type MockCustomCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCustomCryptoMockRecorder
}

// MockCustomCryptoMockRecorder is the mock recorder for MockCustomCrypto
type MockCustomCryptoMockRecorder struct {
	mock *MockCustomCrypto
}

// NewMockCustomCrypto creates a new mock instance
func NewMockCustomCrypto(ctrl *gomock.Controller) *MockCustomCrypto {
	mock := &MockCustomCrypto{ctrl: ctrl}
	mock.recorder = &MockCustomCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomCrypto) EXPECT() *MockCustomCryptoMockRecorder {
	return m.recorder
}

// Encrypt mocks base method
func (m *MockCustomCrypto) Encrypt(arg0, arg1 string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockCustomCryptoMockRecorder) Encrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCustomCrypto)(nil).Encrypt), arg0, arg1)
}

// Decrypt mocks base method
func (m *MockCustomCrypto) Decrypt(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockCustomCryptoMockRecorder) Decrypt(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCustomCrypto)(nil).Decrypt), arg0, arg1, arg2, arg3)
}

// MockPasswordChecker is a mock of PasswordChecker interface
type MockPasswordChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordCheckerMockRecorder
}

// MockPasswordCheckerMockRecorder is the mock recorder for MockPasswordChecker
type MockPasswordCheckerMockRecorder struct {
	mock *MockPasswordChecker
}

// NewMockPasswordChecker creates a new mock instance
func NewMockPasswordChecker(ctrl *gomock.Controller) *MockPasswordChecker {
	mock := &MockPasswordChecker{ctrl: ctrl}
	mock.recorder = &MockPasswordCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPasswordChecker) EXPECT() *MockPasswordCheckerMockRecorder {
	return m.recorder
}

// IsSame mocks base method
func (m *MockPasswordChecker) IsSame(arg0, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsSame indicates an expected call of IsSame
func (mr *MockPasswordCheckerMockRecorder) IsSame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSame", reflect.TypeOf((*MockPasswordChecker)(nil).IsSame), arg0, arg1)
}

// GetHash mocks base method
func (m *MockPasswordChecker) GetHash(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash
func (mr *MockPasswordCheckerMockRecorder) GetHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockPasswordChecker)(nil).GetHash), arg0)
}

// NoMatch mocks base method
func (m *MockPasswordChecker) NoMatch(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoMatch", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoMatch indicates an expected call of NoMatch
func (mr *MockPasswordCheckerMockRecorder) NoMatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoMatch", reflect.TypeOf((*MockPasswordChecker)(nil).NoMatch), arg0)
}
